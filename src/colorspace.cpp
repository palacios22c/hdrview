//
// Copyright (C) Wojciech Jarosz. All rights reserved.
// Use of this source code is governed by a BSD-style license that can
// be found in the LICENSE.txt file.
//

#include "colorspace.h"
#include "Imath_to_linalg.h"
#include "common.h"
#include "scheduler.h"
#include <cmath>
#include <float.h>

using namespace std;

static constexpr float s_CIE_1931_2deg_X[] = {
    0.000129900000f, 0.000145847000f, 0.000163802100f, 0.000184003700f, 0.000206690200f, 0.000232100000f,
    0.000260728000f, 0.000293075000f, 0.000329388000f, 0.000369914000f, 0.000414900000f, 0.000464158700f,
    0.000518986000f, 0.000581854000f, 0.000655234700f, 0.000741600000f, 0.000845029600f, 0.000964526800f,
    0.001094949000f, 0.001231154000f, 0.001368000000f, 0.001502050000f, 0.001642328000f, 0.001802382000f,
    0.001995757000f, 0.002236000000f, 0.002535385000f, 0.002892603000f, 0.003300829000f, 0.003753236000f,
    0.004243000000f, 0.004762389000f, 0.005330048000f, 0.005978712000f, 0.006741117000f, 0.007650000000f,
    0.008751373000f, 0.010028880000f, 0.011421700000f, 0.012869010000f, 0.014310000000f, 0.015704430000f,
    0.017147440000f, 0.018781220000f, 0.020748010000f, 0.023190000000f, 0.026207360000f, 0.029782480000f,
    0.033880920000f, 0.038468240000f, 0.043510000000f, 0.048995600000f, 0.055022600000f, 0.061718800000f,
    0.069212000000f, 0.077630000000f, 0.086958110000f, 0.097176720000f, 0.108406300000f, 0.120767200000f,
    0.134380000000f, 0.149358200000f, 0.165395700000f, 0.181983100000f, 0.198611000000f, 0.214770000000f,
    0.230186800000f, 0.244879700000f, 0.258777300000f, 0.271807900000f, 0.283900000000f, 0.294943800000f,
    0.304896500000f, 0.313787300000f, 0.321645400000f, 0.328500000000f, 0.334351300000f, 0.339210100000f,
    0.343121300000f, 0.346129600000f, 0.348280000000f, 0.349599900000f, 0.350147400000f, 0.350013000000f,
    0.349287000000f, 0.348060000000f, 0.346373300000f, 0.344262400000f, 0.341808800000f, 0.339094100000f,
    0.336200000000f, 0.333197700000f, 0.330041100000f, 0.326635700000f, 0.322886800000f, 0.318700000000f,
    0.314025100000f, 0.308884000000f, 0.303290400000f, 0.297257900000f, 0.290800000000f, 0.283970100000f,
    0.276721400000f, 0.268917800000f, 0.260422700000f, 0.251100000000f, 0.240847500000f, 0.229851200000f,
    0.218407200000f, 0.206811500000f, 0.195360000000f, 0.184213600000f, 0.173327300000f, 0.162688100000f,
    0.152283300000f, 0.142100000000f, 0.132178600000f, 0.122569600000f, 0.113275200000f, 0.104297900000f,
    0.095640000000f, 0.087299550000f, 0.079308040000f, 0.071717760000f, 0.064580990000f, 0.057950010000f,
    0.051862110000f, 0.046281520000f, 0.041150880000f, 0.036412830000f, 0.032010000000f, 0.027917200000f,
    0.024144400000f, 0.020687000000f, 0.017540400000f, 0.014700000000f, 0.012161790000f, 0.009919960000f,
    0.007967240000f, 0.006296346000f, 0.004900000000f, 0.003777173000f, 0.002945320000f, 0.002424880000f,
    0.002236293000f, 0.002400000000f, 0.002925520000f, 0.003836560000f, 0.005174840000f, 0.006982080000f,
    0.009300000000f, 0.012149490000f, 0.015535880000f, 0.019477520000f, 0.023992770000f, 0.029100000000f,
    0.034814850000f, 0.041120160000f, 0.047985040000f, 0.055378610000f, 0.063270000000f, 0.071635010000f,
    0.080462240000f, 0.089739960000f, 0.099456450000f, 0.109600000000f, 0.120167400000f, 0.131114500000f,
    0.142367900000f, 0.153854200000f, 0.165500000000f, 0.177257100000f, 0.189140000000f, 0.201169400000f,
    0.213365800000f, 0.225749900000f, 0.238320900000f, 0.251066800000f, 0.263992200000f, 0.277101700000f,
    0.290400000000f, 0.303891200000f, 0.317572600000f, 0.331438400000f, 0.345482800000f, 0.359700000000f,
    0.374083900000f, 0.388639600000f, 0.403378400000f, 0.418311500000f, 0.433449900000f, 0.448795300000f,
    0.464336000000f, 0.480064000000f, 0.495971300000f, 0.512050100000f, 0.528295900000f, 0.544691600000f,
    0.561209400000f, 0.577821500000f, 0.594500000000f, 0.611220900000f, 0.627975800000f, 0.644760200000f,
    0.661569700000f, 0.678400000000f, 0.695239200000f, 0.712058600000f, 0.728828400000f, 0.745518800000f,
    0.762100000000f, 0.778543200000f, 0.794825600000f, 0.810926400000f, 0.826824800000f, 0.842500000000f,
    0.857932500000f, 0.873081600000f, 0.887894400000f, 0.902318100000f, 0.916300000000f, 0.929799500000f,
    0.942798400000f, 0.955277600000f, 0.967217900000f, 0.978600000000f, 0.989385600000f, 0.999548800000f,
    1.009089200000f, 1.018006400000f, 1.026300000000f, 1.033982700000f, 1.040986000000f, 1.047188000000f,
    1.052466700000f, 1.056700000000f, 1.059794400000f, 1.061799200000f, 1.062806800000f, 1.062909600000f,
    1.062200000000f, 1.060735200000f, 1.058443600000f, 1.055224400000f, 1.050976800000f, 1.045600000000f,
    1.039036900000f, 1.031360800000f, 1.022666200000f, 1.013047700000f, 1.002600000000f, 0.991367500000f,
    0.979331400000f, 0.966491600000f, 0.952847900000f, 0.938400000000f, 0.923194000000f, 0.907244000000f,
    0.890502000000f, 0.872920000000f, 0.854449900000f, 0.835084000000f, 0.814946000000f, 0.794186000000f,
    0.772954000000f, 0.751400000000f, 0.729583600000f, 0.707588800000f, 0.685602200000f, 0.663810400000f,
    0.642400000000f, 0.621514900000f, 0.601113800000f, 0.581105200000f, 0.561397700000f, 0.541900000000f,
    0.522599500000f, 0.503546400000f, 0.484743600000f, 0.466193900000f, 0.447900000000f, 0.429861300000f,
    0.412098000000f, 0.394644000000f, 0.377533300000f, 0.360800000000f, 0.344456300000f, 0.328516800000f,
    0.313019200000f, 0.298001100000f, 0.283500000000f, 0.269544800000f, 0.256118400000f, 0.243189600000f,
    0.230727200000f, 0.218700000000f, 0.207097100000f, 0.195923200000f, 0.185170800000f, 0.174832300000f,
    0.164900000000f, 0.155366700000f, 0.146230000000f, 0.137490000000f, 0.129146700000f, 0.121200000000f,
    0.113639700000f, 0.106465000000f, 0.099690440000f, 0.093330610000f, 0.087400000000f, 0.081900960000f,
    0.076804280000f, 0.072077120000f, 0.067686640000f, 0.063600000000f, 0.059806850000f, 0.056282160000f,
    0.052971040000f, 0.049818610000f, 0.046770000000f, 0.043784050000f, 0.040875360000f, 0.038072640000f,
    0.035404610000f, 0.032900000000f, 0.030564190000f, 0.028380560000f, 0.026344840000f, 0.024452750000f,
    0.022700000000f, 0.021084290000f, 0.019599880000f, 0.018237320000f, 0.016987170000f, 0.015840000000f,
    0.014790640000f, 0.013831320000f, 0.012948680000f, 0.012129200000f, 0.011359160000f, 0.010629350000f,
    0.009938846000f, 0.009288422000f, 0.008678854000f, 0.008110916000f, 0.007582388000f, 0.007088746000f,
    0.006627313000f, 0.006195408000f, 0.005790346000f, 0.005409826000f, 0.005052583000f, 0.004717512000f,
    0.004403507000f, 0.004109457000f, 0.003833913000f, 0.003575748000f, 0.003334342000f, 0.003109075000f,
    0.002899327000f, 0.002704348000f, 0.002523020000f, 0.002354168000f, 0.002196616000f, 0.002049190000f,
    0.001910960000f, 0.001781438000f, 0.001660110000f, 0.001546459000f, 0.001439971000f, 0.001340042000f,
    0.001246275000f, 0.001158471000f, 0.001076430000f, 0.000999949300f, 0.000928735800f, 0.000862433200f,
    0.000800750300f, 0.000743396000f, 0.000690078600f, 0.000640515600f, 0.000594502100f, 0.000551864600f,
    0.000512429000f, 0.000476021300f, 0.000442453600f, 0.000411511700f, 0.000382981400f, 0.000356649100f,
    0.000332301100f, 0.000309758600f, 0.000288887100f, 0.000269539400f, 0.000251568200f, 0.000234826100f,
    0.000219171000f, 0.000204525800f, 0.000190840500f, 0.000178065400f, 0.000166150500f, 0.000155023600f,
    0.000144621900f, 0.000134909800f, 0.000125852000f, 0.000117413000f, 0.000109551500f, 0.000102224500f,
    0.000095394450f, 0.000089023900f, 0.000083075270f, 0.000077512690f, 0.000072313040f, 0.000067457780f,
    0.000062928440f, 0.000058706520f, 0.000054770280f, 0.000051099180f, 0.000047676540f, 0.000044485670f,
    0.000041509940f, 0.000038733240f, 0.000036142030f, 0.000033723520f, 0.000031464870f, 0.000029353260f,
    0.000027375730f, 0.000025524330f, 0.000023793760f, 0.000022178700f, 0.000020673830f, 0.000019272260f,
    0.000017966400f, 0.000016749910f, 0.000015616480f, 0.000014559770f, 0.000013573870f, 0.000012654360f,
    0.000011797230f, 0.000010998440f, 0.000010253980f, 0.000009559646f, 0.000008912044f, 0.000008308358f,
    0.000007745769f, 0.000007221456f, 0.000006732475f, 0.000006276423f, 0.000005851304f, 0.000005455118f,
    0.000005085868f, 0.000004741466f, 0.000004420236f, 0.000004120783f, 0.000003841716f, 0.000003581652f,
    0.000003339127f, 0.000003112949f, 0.000002902121f, 0.000002705645f, 0.000002522525f, 0.000002351726f,
    0.000002192415f, 0.000002043902f, 0.000001905497f, 0.000001776509f, 0.000001656215f, 0.000001544022f,
    0.000001439440f, 0.000001341977f, 0.000001251141f};
static constexpr float s_CIE_1931_2deg_Y[] = {
    0.000003917000f, 0.000004393581f, 0.000004929604f, 0.000005532136f, 0.000006208245f, 0.000006965000f,
    0.000007813219f, 0.000008767336f, 0.000009839844f, 0.000011043230f, 0.000012390000f, 0.000013886410f,
    0.000015557280f, 0.000017442960f, 0.000019583750f, 0.000022020000f, 0.000024839650f, 0.000028041260f,
    0.000031531040f, 0.000035215210f, 0.000039000000f, 0.000042826400f, 0.000046914600f, 0.000051589600f,
    0.000057176400f, 0.000064000000f, 0.000072344210f, 0.000082212240f, 0.000093508160f, 0.000106136100f,
    0.000120000000f, 0.000134984000f, 0.000151492000f, 0.000170208000f, 0.000191816000f, 0.000217000000f,
    0.000246906700f, 0.000281240000f, 0.000318520000f, 0.000357266700f, 0.000396000000f, 0.000433714700f,
    0.000473024000f, 0.000517876000f, 0.000572218700f, 0.000640000000f, 0.000724560000f, 0.000825500000f,
    0.000941160000f, 0.001069880000f, 0.001210000000f, 0.001362091000f, 0.001530752000f, 0.001720368000f,
    0.001935323000f, 0.002180000000f, 0.002454800000f, 0.002764000000f, 0.003117800000f, 0.003526400000f,
    0.004000000000f, 0.004546240000f, 0.005159320000f, 0.005829280000f, 0.006546160000f, 0.007300000000f,
    0.008086507000f, 0.008908720000f, 0.009767680000f, 0.010664430000f, 0.011600000000f, 0.012573170000f,
    0.013582720000f, 0.014629680000f, 0.015715090000f, 0.016840000000f, 0.018007360000f, 0.019214480000f,
    0.020453920000f, 0.021718240000f, 0.023000000000f, 0.024294610000f, 0.025610240000f, 0.026958570000f,
    0.028351250000f, 0.029800000000f, 0.031310830000f, 0.032883680000f, 0.034521120000f, 0.036225710000f,
    0.038000000000f, 0.039846670000f, 0.041768000000f, 0.043766000000f, 0.045842670000f, 0.048000000000f,
    0.050243680000f, 0.052573040000f, 0.054980560000f, 0.057458720000f, 0.060000000000f, 0.062601970000f,
    0.065277520000f, 0.068042080000f, 0.070911090000f, 0.073900000000f, 0.077016000000f, 0.080266400000f,
    0.083666800000f, 0.087232800000f, 0.090980000000f, 0.094917550000f, 0.099045840000f, 0.103367400000f,
    0.107884600000f, 0.112600000000f, 0.117532000000f, 0.122674400000f, 0.127992800000f, 0.133452800000f,
    0.139020000000f, 0.144676400000f, 0.150469300000f, 0.156461900000f, 0.162717700000f, 0.169300000000f,
    0.176243100000f, 0.183558100000f, 0.191273500000f, 0.199418000000f, 0.208020000000f, 0.217119900000f,
    0.226734500000f, 0.236857100000f, 0.247481200000f, 0.258600000000f, 0.270184900000f, 0.282293900000f,
    0.295050500000f, 0.308578000000f, 0.323000000000f, 0.338402100000f, 0.354685800000f, 0.371698600000f,
    0.389287500000f, 0.407300000000f, 0.425629900000f, 0.444309600000f, 0.463394400000f, 0.482939500000f,
    0.503000000000f, 0.523569300000f, 0.544512000000f, 0.565690000000f, 0.586965300000f, 0.608200000000f,
    0.629345600000f, 0.650306800000f, 0.670875200000f, 0.690842400000f, 0.710000000000f, 0.728185200000f,
    0.745463600000f, 0.761969400000f, 0.777836800000f, 0.793200000000f, 0.808110400000f, 0.822496200000f,
    0.836306800000f, 0.849491600000f, 0.862000000000f, 0.873810800000f, 0.884962400000f, 0.895493600000f,
    0.905443200000f, 0.914850100000f, 0.923734800000f, 0.932092400000f, 0.939922600000f, 0.947225200000f,
    0.954000000000f, 0.960256100000f, 0.966007400000f, 0.971260600000f, 0.976022500000f, 0.980300000000f,
    0.984092400000f, 0.987418200000f, 0.990312800000f, 0.992811600000f, 0.994950100000f, 0.996710800000f,
    0.998098300000f, 0.999112000000f, 0.999748200000f, 1.000000000000f, 0.999856700000f, 0.999304600000f,
    0.998325500000f, 0.996898700000f, 0.995000000000f, 0.992600500000f, 0.989742600000f, 0.986444400000f,
    0.982724100000f, 0.978600000000f, 0.974083700000f, 0.969171200000f, 0.963856800000f, 0.958134900000f,
    0.952000000000f, 0.945450400000f, 0.938499200000f, 0.931162800000f, 0.923457600000f, 0.915400000000f,
    0.907006400000f, 0.898277200000f, 0.889204800000f, 0.879781600000f, 0.870000000000f, 0.859861300000f,
    0.849392000000f, 0.838622000000f, 0.827581300000f, 0.816300000000f, 0.804794700000f, 0.793082000000f,
    0.781192000000f, 0.769154700000f, 0.757000000000f, 0.744754100000f, 0.732422400000f, 0.720003600000f,
    0.707496500000f, 0.694900000000f, 0.682219200000f, 0.669471600000f, 0.656674400000f, 0.643844800000f,
    0.631000000000f, 0.618155500000f, 0.605314400000f, 0.592475600000f, 0.579637900000f, 0.566800000000f,
    0.553961100000f, 0.541137200000f, 0.528352800000f, 0.515632300000f, 0.503000000000f, 0.490468800000f,
    0.478030400000f, 0.465677600000f, 0.453403200000f, 0.441200000000f, 0.429080000000f, 0.417036000000f,
    0.405032000000f, 0.393032000000f, 0.381000000000f, 0.368918400000f, 0.356827200000f, 0.344776800000f,
    0.332817600000f, 0.321000000000f, 0.309338100000f, 0.297850400000f, 0.286593600000f, 0.275624500000f,
    0.265000000000f, 0.254763200000f, 0.244889600000f, 0.235334400000f, 0.226052800000f, 0.217000000000f,
    0.208161600000f, 0.199548800000f, 0.191155200000f, 0.182974400000f, 0.175000000000f, 0.167223500000f,
    0.159646400000f, 0.152277600000f, 0.145125900000f, 0.138200000000f, 0.131500300000f, 0.125024800000f,
    0.118779200000f, 0.112769100000f, 0.107000000000f, 0.101476200000f, 0.096188640000f, 0.091122960000f,
    0.086264850000f, 0.081600000000f, 0.077120640000f, 0.072825520000f, 0.068710080000f, 0.064769760000f,
    0.061000000000f, 0.057396210000f, 0.053955040000f, 0.050673760000f, 0.047549650000f, 0.044580000000f,
    0.041758720000f, 0.039084960000f, 0.036563840000f, 0.034200480000f, 0.032000000000f, 0.029962610000f,
    0.028076640000f, 0.026329360000f, 0.024708050000f, 0.023200000000f, 0.021800770000f, 0.020501120000f,
    0.019281080000f, 0.018120690000f, 0.017000000000f, 0.015903790000f, 0.014837180000f, 0.013810680000f,
    0.012834780000f, 0.011920000000f, 0.011068310000f, 0.010273390000f, 0.009533311000f, 0.008846157000f,
    0.008210000000f, 0.007623781000f, 0.007085424000f, 0.006591476000f, 0.006138485000f, 0.005723000000f,
    0.005343059000f, 0.004995796000f, 0.004676404000f, 0.004380075000f, 0.004102000000f, 0.003838453000f,
    0.003589099000f, 0.003354219000f, 0.003134093000f, 0.002929000000f, 0.002738139000f, 0.002559876000f,
    0.002393244000f, 0.002237275000f, 0.002091000000f, 0.001953587000f, 0.001824580000f, 0.001703580000f,
    0.001590187000f, 0.001484000000f, 0.001384496000f, 0.001291268000f, 0.001204092000f, 0.001122744000f,
    0.001047000000f, 0.000976589600f, 0.000911108800f, 0.000850133200f, 0.000793238400f, 0.000740000000f,
    0.000690082700f, 0.000643310000f, 0.000599496000f, 0.000558454700f, 0.000520000000f, 0.000483913600f,
    0.000450052800f, 0.000418345200f, 0.000388718400f, 0.000361100000f, 0.000335383500f, 0.000311440400f,
    0.000289165600f, 0.000268453900f, 0.000249200000f, 0.000231301900f, 0.000214685600f, 0.000199288400f,
    0.000185047500f, 0.000171900000f, 0.000159778100f, 0.000148604400f, 0.000138301600f, 0.000128792500f,
    0.000120000000f, 0.000111859500f, 0.000104322400f, 0.000097335600f, 0.000090845870f, 0.000084800000f,
    0.000079146670f, 0.000073858000f, 0.000068916000f, 0.000064302670f, 0.000060000000f, 0.000055981870f,
    0.000052225600f, 0.000048718400f, 0.000045447470f, 0.000042400000f, 0.000039561040f, 0.000036915120f,
    0.000034448680f, 0.000032148160f, 0.000030000000f, 0.000027991250f, 0.000026113560f, 0.000024360240f,
    0.000022724610f, 0.000021200000f, 0.000019778550f, 0.000018452850f, 0.000017216870f, 0.000016064590f,
    0.000014990000f, 0.000013987280f, 0.000013051550f, 0.000012178180f, 0.000011362540f, 0.000010600000f,
    0.000009885877f, 0.000009217304f, 0.000008592362f, 0.000008009133f, 0.000007465700f, 0.000006959567f,
    0.000006487995f, 0.000006048699f, 0.000005639396f, 0.000005257800f, 0.000004901771f, 0.000004569720f,
    0.000004260194f, 0.000003971739f, 0.000003702900f, 0.000003452163f, 0.000003218302f, 0.000003000300f,
    0.000002797139f, 0.000002607800f, 0.000002431220f, 0.000002266531f, 0.000002113013f, 0.000001969943f,
    0.000001836600f, 0.000001712230f, 0.000001596228f, 0.000001488090f, 0.000001387314f, 0.000001293400f,
    0.000001205820f, 0.000001124143f, 0.000001048009f, 0.000000977058f, 0.000000910930f, 0.000000849251f,
    0.000000791721f, 0.000000738090f, 0.000000688110f, 0.000000641530f, 0.000000598090f, 0.000000557575f,
    0.000000519808f, 0.000000484612f, 0.000000451810f};
static constexpr float s_CIE_1931_2deg_Z[] = {
    0.000606100000f, 0.000680879200f, 0.000765145600f, 0.000860012400f, 0.000966592800f, 0.001086000000f,
    0.001220586000f, 0.001372729000f, 0.001543579000f, 0.001734286000f, 0.001946000000f, 0.002177777000f,
    0.002435809000f, 0.002731953000f, 0.003078064000f, 0.003486000000f, 0.003975227000f, 0.004540880000f,
    0.005158320000f, 0.005802907000f, 0.006450001000f, 0.007083216000f, 0.007745488000f, 0.008501152000f,
    0.009414544000f, 0.010549990000f, 0.011965800000f, 0.013655870000f, 0.015588050000f, 0.017730150000f,
    0.020050010000f, 0.022511360000f, 0.025202880000f, 0.028279720000f, 0.031897040000f, 0.036210000000f,
    0.041437710000f, 0.047503720000f, 0.054119880000f, 0.060998030000f, 0.067850010000f, 0.074486320000f,
    0.081361560000f, 0.089153640000f, 0.098540480000f, 0.110200000000f, 0.124613300000f, 0.141701700000f,
    0.161303500000f, 0.183256800000f, 0.207400000000f, 0.233692100000f, 0.262611400000f, 0.294774600000f,
    0.330798500000f, 0.371300000000f, 0.416209100000f, 0.465464200000f, 0.519694800000f, 0.579530300000f,
    0.645600000000f, 0.718483800000f, 0.796713300000f, 0.877845900000f, 0.959439000000f, 1.039050100000f,
    1.115367300000f, 1.188497100000f, 1.258123300000f, 1.323929600000f, 1.385600000000f, 1.442635200000f,
    1.494803500000f, 1.542190300000f, 1.584880700000f, 1.622960000000f, 1.656404800000f, 1.685295900000f,
    1.709874500000f, 1.730382100000f, 1.747060000000f, 1.760044600000f, 1.769623300000f, 1.776263700000f,
    1.780433400000f, 1.782600000000f, 1.782968200000f, 1.781699800000f, 1.779198200000f, 1.775867100000f,
    1.772110000000f, 1.768258900000f, 1.764039000000f, 1.758943800000f, 1.752466300000f, 1.744100000000f,
    1.733559500000f, 1.720858100000f, 1.705936900000f, 1.688737200000f, 1.669200000000f, 1.647528700000f,
    1.623412700000f, 1.596022300000f, 1.564528000000f, 1.528100000000f, 1.486111400000f, 1.439521500000f,
    1.389879900000f, 1.338736200000f, 1.287640000000f, 1.237422300000f, 1.187824300000f, 1.138761100000f,
    1.090148000000f, 1.041900000000f, 0.994197600000f, 0.947347300000f, 0.901453100000f, 0.856619300000f,
    0.812950100000f, 0.770517300000f, 0.729444800000f, 0.689913600000f, 0.652104900000f, 0.616200000000f,
    0.582328600000f, 0.550416200000f, 0.520337600000f, 0.491967300000f, 0.465180000000f, 0.439924600000f,
    0.416183600000f, 0.393882200000f, 0.372945900000f, 0.353300000000f, 0.334857800000f, 0.317552100000f,
    0.301337500000f, 0.286168600000f, 0.272000000000f, 0.258817100000f, 0.246483800000f, 0.234771800000f,
    0.223453300000f, 0.212300000000f, 0.201169200000f, 0.190119600000f, 0.179225400000f, 0.168560800000f,
    0.158200000000f, 0.148138300000f, 0.138375800000f, 0.128994200000f, 0.120075100000f, 0.111700000000f,
    0.103904800000f, 0.096667480000f, 0.089982720000f, 0.083845310000f, 0.078249990000f, 0.073208990000f,
    0.068678160000f, 0.064567840000f, 0.060788350000f, 0.057250010000f, 0.053904350000f, 0.050746640000f,
    0.047752760000f, 0.044898590000f, 0.042160000000f, 0.039507280000f, 0.036935640000f, 0.034458360000f,
    0.032088720000f, 0.029840000000f, 0.027711810000f, 0.025694440000f, 0.023787160000f, 0.021989250000f,
    0.020300000000f, 0.018718050000f, 0.017240360000f, 0.015863640000f, 0.014584610000f, 0.013400000000f,
    0.012307230000f, 0.011301880000f, 0.010377920000f, 0.009529306000f, 0.008749999000f, 0.008035200000f,
    0.007381600000f, 0.006785400000f, 0.006242800000f, 0.005749999000f, 0.005303600000f, 0.004899800000f,
    0.004534200000f, 0.004202400000f, 0.003900000000f, 0.003623200000f, 0.003370600000f, 0.003141400000f,
    0.002934800000f, 0.002749999000f, 0.002585200000f, 0.002438600000f, 0.002309400000f, 0.002196800000f,
    0.002100000000f, 0.002017733000f, 0.001948200000f, 0.001889800000f, 0.001840933000f, 0.001800000000f,
    0.001766267000f, 0.001737800000f, 0.001711200000f, 0.001683067000f, 0.001650001000f, 0.001610133000f,
    0.001564400000f, 0.001513600000f, 0.001458533000f, 0.001400000000f, 0.001336667000f, 0.001270000000f,
    0.001205000000f, 0.001146667000f, 0.001100000000f, 0.001068800000f, 0.001049400000f, 0.001035600000f,
    0.001021200000f, 0.001000000000f, 0.000968640000f, 0.000929920000f, 0.000886880000f, 0.000842560000f,
    0.000800000000f, 0.000760960000f, 0.000723680000f, 0.000685920000f, 0.000645440000f, 0.000600000000f,
    0.000547866700f, 0.000491600000f, 0.000435400000f, 0.000383466700f, 0.000340000000f, 0.000307253300f,
    0.000283160000f, 0.000265440000f, 0.000251813300f, 0.000240000000f, 0.000229546700f, 0.000220640000f,
    0.000211960000f, 0.000202186700f, 0.000190000000f, 0.000174213300f, 0.000155640000f, 0.000135960000f,
    0.000116853300f, 0.000100000000f, 0.000086133330f, 0.000074600000f, 0.000065000000f, 0.000056933330f,
    0.000049999990f, 0.000044160000f, 0.000039480000f, 0.000035720000f, 0.000032640000f, 0.000030000000f,
    0.000027653330f, 0.000025560000f, 0.000023640000f, 0.000021813330f, 0.000020000000f, 0.000018133330f,
    0.000016200000f, 0.000014200000f, 0.000012133330f, 0.000010000000f, 0.000007733333f, 0.000005400000f,
    0.000003200000f, 0.000001333333f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f,
    0.000000000000f, 0.000000000000f, 0.000000000000f};

static constexpr TabulatedSpectrum s_CIE_X = {s_CIE_1931_2deg_X,
                                              sizeof(s_CIE_1931_2deg_X) / sizeof(s_CIE_1931_2deg_X[0]), 360.0f, 830.0f};
static constexpr TabulatedSpectrum s_CIE_Y = {s_CIE_1931_2deg_Y,
                                              sizeof(s_CIE_1931_2deg_Y) / sizeof(s_CIE_1931_2deg_Y[0]), 360.0f, 830.0f};
static constexpr TabulatedSpectrum s_CIE_Z = {s_CIE_1931_2deg_Z,
                                              sizeof(s_CIE_1931_2deg_Z) / sizeof(s_CIE_1931_2deg_Z[0]), 360.0f, 830.0f};

// source: https://cie.co.at/data-tables and https://github.com/hughsie/colord/tree/main/data/illuminant

static float s_Illuminance_D50[] = {
    0.01922f, 0.222348f, 0.425476f, 0.628604f, 0.831732f, 1.03486f, 1.23799f, 1.44112f, 1.64424f, 1.84737f, 2.0505f,
    2.62329f, 3.19608f,  3.76887f,  4.34166f,  4.91445f,  5.48724f, 6.06003f, 6.63282f, 7.20561f, 7.7784f,  8.47531f,
    9.17222f, 9.86913f,  10.566f,   11.263f,   11.9599f,  12.6568f, 13.3537f, 14.0506f, 14.7475f, 15.0676f, 15.3876f,
    15.7076f, 16.0277f,  16.3478f,  16.6678f,  16.9878f,  17.3079f, 17.628f,  17.948f,  18.2542f, 18.5603f, 18.8665f,
    19.1727f, 19.4788f,  19.785f,   20.0912f,  20.3974f,  20.7035f, 21.0097f, 21.3029f, 21.5961f, 21.8894f, 22.1826f,
    22.4758f, 22.769f,   23.0622f,  23.3555f,  23.6487f,  23.9419f, 24.2438f, 24.5457f, 24.8475f, 25.1494f, 25.4513f,
    25.7532f, 26.0551f,  26.3569f,  26.6588f,  26.9607f,  26.7134f, 26.4661f, 26.2187f, 25.9714f, 25.7241f, 25.4768f,
    25.2295f, 24.9821f,  24.7348f,  24.4875f,  25.0258f,  25.5641f, 26.1024f, 26.6407f, 27.179f,  27.7174f, 28.2557f,
    28.794f,  29.3323f,  29.8706f,  31.8144f,  33.7581f,  35.7018f, 37.6456f, 39.5894f, 41.5331f, 43.4768f, 45.4206f,
    47.3644f, 49.3081f,  50.0286f,  50.749f,   51.4695f,  52.19f,   52.9104f, 53.6309f, 54.3514f, 55.0719f, 55.7923f,
    56.5128f, 56.8649f,  57.217f,   57.5691f,  57.9212f,  58.2733f, 58.6254f, 58.9775f, 59.3296f, 59.6817f, 60.0338f,
    59.8122f, 59.5905f,  59.3689f,  59.1473f,  58.9256f,  58.704f,  58.4824f, 58.2608f, 58.0391f, 57.8175f, 59.5182f,
    61.219f,  62.9197f,  64.6205f,  66.3212f,  68.0219f,  69.7227f, 71.4234f, 73.1242f, 74.8249f, 76.0671f, 77.3094f,
    78.5516f, 79.7938f,  81.036f,   82.2783f,  83.5205f,  84.7627f, 86.005f,  87.2472f, 87.5837f, 87.9202f, 88.2567f,
    88.5932f, 88.9297f,  89.2662f,  89.6027f,  89.9392f,  90.2757f, 90.6122f, 90.6878f, 90.7634f, 90.839f,  90.9146f,
    90.9902f, 91.0657f,  91.1413f,  91.2169f,  91.2925f,  91.3681f, 91.7421f, 92.1162f, 92.4902f, 92.8643f, 93.2383f,
    93.6123f, 93.9864f,  94.3604f,  94.7345f,  95.1085f,  94.7939f, 94.4793f, 94.1648f, 93.8502f, 93.5356f, 93.221f,
    92.9064f, 92.5919f,  92.2773f,  91.9627f,  92.3388f,  92.7149f, 93.091f,  93.4671f, 93.8432f, 94.2193f, 94.5954f,
    94.9715f, 95.3476f,  95.7237f,  95.8127f,  95.9016f,  95.9906f, 96.0795f, 96.1685f, 96.2575f, 96.3464f, 96.4354f,
    96.5243f, 96.6133f,  96.6649f,  96.7164f,  96.768f,   96.8196f, 96.8712f, 96.9227f, 96.9743f, 97.0259f, 97.0774f,
    97.129f,  97.626f,   98.123f,   98.62f,    99.117f,   99.614f,  100.111f, 100.608f, 101.105f, 101.602f, 102.099f,
    101.965f, 101.83f,   101.696f,  101.561f,  101.427f,  101.292f, 101.158f, 101.024f, 100.889f, 100.755f, 100.911f,
    101.067f, 101.223f,  101.38f,   101.536f,  101.692f,  101.848f, 102.005f, 102.161f, 102.317f, 102.085f, 101.854f,
    101.622f, 101.39f,   101.158f,  100.927f,  100.695f,  100.463f, 100.232f, 100.f,    99.7735f, 99.547f,  99.3205f,
    99.094f,  98.8675f,  98.641f,   98.4145f,  98.188f,   97.9615f, 97.735f,  97.8533f, 97.9716f, 98.0899f, 98.2082f,
    98.3265f, 98.4448f,  98.5631f,  98.6814f,  98.7997f,  98.918f,  98.3761f, 97.8342f, 97.2922f, 96.7503f, 96.2084f,
    95.6665f, 95.1246f,  94.5826f,  94.0407f,  93.4988f,  93.9177f, 94.3366f, 94.7555f, 95.1744f, 95.5933f, 96.0122f,
    96.4311f, 96.85f,    97.2689f,  97.6878f,  97.8459f,  98.0041f, 98.1622f, 98.3203f, 98.4784f, 98.6366f, 98.7947f,
    98.9528f, 99.111f,   99.2691f,  99.2463f,  99.2236f,  99.2008f, 99.1781f, 99.1553f, 99.1325f, 99.1098f, 99.087f,
    99.0643f, 99.0415f,  98.7095f,  98.3776f,  98.0456f,  97.7136f, 97.3816f, 97.0497f, 96.7177f, 96.3857f, 96.0538f,
    95.7218f, 96.0353f,  96.3489f,  96.6624f,  96.976f,   97.2895f, 97.603f,  97.9166f, 98.2301f, 98.5437f, 98.8572f,
    98.5382f, 98.2192f,  97.9002f,  97.5812f,  97.2622f,  96.9432f, 96.6242f, 96.3052f, 95.9862f, 95.6672f, 95.9195f,
    96.1717f, 96.424f,   96.6762f,  96.9285f,  97.1808f,  97.433f,  97.6853f, 97.9375f, 98.1898f, 98.6712f, 99.1525f,
    99.6339f, 100.115f,  100.597f,  101.078f,  101.559f,  102.041f, 102.522f, 103.003f, 102.616f, 102.229f, 101.842f,
    101.455f, 101.068f,  100.681f,  100.294f,  99.9071f,  99.52f,   99.133f,  97.9578f, 96.7826f, 95.6074f, 94.4322f,
    93.257f,  92.0817f,  90.9065f,  89.7313f,  88.5561f,  87.3809f, 87.8032f, 88.2254f, 88.6477f, 89.0699f, 89.4922f,
    89.9145f, 90.3367f,  90.759f,   91.1812f,  91.6035f,  91.732f,  91.8605f, 91.989f,  92.1175f, 92.246f,  92.3746f,
    92.5031f, 92.6316f,  92.7601f,  92.8886f,  91.2852f,  89.6818f, 88.0783f, 86.4749f, 84.8715f, 83.2681f, 81.6647f,
    80.0612f, 78.4578f,  76.8544f,  77.8201f,  78.7858f,  79.7514f, 80.7171f, 81.6828f, 82.6485f, 83.6142f, 84.5798f,
    85.5455f, 86.5112f,  87.1181f,  87.7249f,  88.3318f,  88.9386f, 89.5455f, 90.1524f, 90.7592f, 91.3661f, 91.9729f,
    92.5798f, 91.1448f,  89.7098f,  88.2748f,  86.8398f,  85.4048f, 83.9699f, 82.5349f, 81.0999f, 79.6649f, 78.2299f,
    76.1761f, 74.1223f,  72.0685f,  70.0147f,  67.9608f,  65.907f,  63.8532f, 61.7994f, 59.7456f, 57.6918f, 60.2149f,
    62.738f,  65.2612f,  67.7843f,  70.3074f,  72.8305f,  75.3536f, 77.8768f, 80.3999f, 82.923f,  82.4581f, 81.9932f,
    81.5283f, 81.0634f,  80.5985f,  80.1336f,  79.6687f,  79.2038f, 78.7389f, 78.274f,  78.402f,  78.5301f, 78.6581f,
    78.7862f, 78.9142f,  79.0422f,  79.1703f,  79.2983f,  79.4264f, 79.5544f, 78.9391f, 78.3238f, 77.7085f, 77.0932f,
    76.478f,  75.8627f,  75.2474f,  74.6321f,  74.0168f,  73.4015f, 72.4534f, 71.5052f, 70.5571f, 69.609f,  68.6608f,
    67.7127f, 66.7646f,  65.8165f,  64.8683f,  63.9202f,  64.6059f, 65.2916f, 65.9772f, 66.6629f, 67.3486f, 68.0343f,
    68.72f,   69.4056f,  70.0913f,  70.777f,   71.1435f,  71.5099f, 71.8764f, 72.2429f, 72.6094f, 72.9758f, 73.3423f,
    73.7088f, 74.0752f,  74.4417f};

static constexpr TabulatedSpectrum s_Illuminant_D50 = {
    s_Illuminance_D50, sizeof(s_Illuminance_D50) / sizeof(s_Illuminance_D50[0]), 300.f, 830.f};

static constexpr float s_Illuminance_D55[] = {
    // CIE standard illuminant D55, mid-morning/mid-afternoon daylight, at 5nm resolution
    0.024f,   1.048f,   2.072f,   6.648f,   11.224f,  15.936f,  20.647f,  22.266f,  23.885f,  25.851f,  27.817f,
    29.219f,  30.621f,  32.464f,  34.308f,  33.446f,  32.584f,  35.335f,  38.087f,  49.518f,  60.949f,  64.751f,
    68.554f,  70.065f,  71.577f,  69.746f,  67.914f,  76.760f,  85.605f,  91.799f,  97.993f,  99.228f,  100.463f,
    100.188f, 99.913f,  101.326f, 102.739f, 100.409f, 98.078f,  99.379f,  100.680f, 100.688f, 100.695f, 100.341f,
    99.987f,  102.098f, 104.210f, 103.156f, 102.102f, 102.535f, 102.968f, 101.484f, 100.000f, 98.608f,  97.216f,
    97.482f,  97.749f,  94.590f,  91.432f,  92.926f,  94.419f,  94.780f,  95.140f,  94.680f,  94.220f,  92.334f,
    90.448f,  91.389f,  92.330f,  90.592f,  88.854f,  89.586f,  90.317f,  92.133f,  93.950f,  91.953f,  89.956f,
    84.817f,  79.677f,  81.258f,  82.840f,  83.842f,  84.844f,  77.539f,  70.235f,  74.768f,  79.301f,  82.147f,
    84.993f,  78.437f,  71.880f,  62.337f,  52.793f,  64.360f,  75.927f,  73.872f,  71.818f};
static constexpr TabulatedSpectrum s_Illuminant_D55 = {
    s_Illuminance_D55, sizeof(s_Illuminance_D55) / sizeof(s_Illuminance_D55[0]), 300.f, 780.f};

static constexpr float s_Illuminance_D65[] = {
    0.0341f,  0.36014f, 0.68618f, 1.01222f, 1.33826f, 1.6643f,  1.99034f, 2.31638f, 2.64242f, 2.96846f, 3.2945f,
    4.98865f, 6.6828f,  8.37695f, 10.0711f, 11.7652f, 13.4594f, 15.1535f, 16.8477f, 18.5418f, 20.236f,  21.9177f,
    23.5995f, 25.2812f, 26.963f,  28.6447f, 30.3265f, 32.0082f, 33.69f,   35.3717f, 37.0535f, 37.343f,  37.6326f,
    37.9221f, 38.2116f, 38.5011f, 38.7907f, 39.0802f, 39.3697f, 39.6593f, 39.9488f, 40.4451f, 40.9414f, 41.4377f,
    41.934f,  42.4302f, 42.9265f, 43.4228f, 43.9191f, 44.4154f, 44.9117f, 45.0844f, 45.257f,  45.4297f, 45.6023f,
    45.775f,  45.9477f, 46.1203f, 46.293f,  46.4656f, 46.6383f, 47.1834f, 47.7285f, 48.2735f, 48.8186f, 49.3637f,
    49.9088f, 50.4539f, 50.9989f, 51.544f,  52.0891f, 51.8777f, 51.6664f, 51.455f,  51.2437f, 51.0323f, 50.8209f,
    50.6096f, 50.3982f, 50.1869f, 49.9755f, 50.4428f, 50.91f,   51.3773f, 51.8446f, 52.3118f, 52.7791f, 53.2464f,
    53.7137f, 54.1809f, 54.6482f, 57.4589f, 60.2695f, 63.0802f, 65.8909f, 68.7015f, 71.5122f, 74.3229f, 77.1336f,
    79.9442f, 82.7549f, 83.628f,  84.5011f, 85.3742f, 86.2473f, 87.1204f, 87.9936f, 88.8667f, 89.7398f, 90.6129f,
    91.486f,  91.6806f, 91.8752f, 92.0697f, 92.2643f, 92.4589f, 92.6535f, 92.8481f, 93.0426f, 93.2372f, 93.4318f,
    92.7568f, 92.0819f, 91.4069f, 90.732f,  90.057f,  89.3821f, 88.7071f, 88.0322f, 87.3572f, 86.6823f, 88.5006f,
    90.3188f, 92.1371f, 93.9554f, 95.7736f, 97.5919f, 99.4102f, 101.228f, 103.047f, 104.865f, 106.079f, 107.294f,
    108.508f, 109.722f, 110.936f, 112.151f, 113.365f, 114.579f, 115.794f, 117.008f, 117.088f, 117.169f, 117.249f,
    117.33f,  117.41f,  117.49f,  117.571f, 117.651f, 117.732f, 117.812f, 117.517f, 117.222f, 116.927f, 116.632f,
    116.336f, 116.041f, 115.746f, 115.451f, 115.156f, 114.861f, 114.967f, 115.073f, 115.18f,  115.286f, 115.392f,
    115.498f, 115.604f, 115.711f, 115.817f, 115.923f, 115.212f, 114.501f, 113.789f, 113.078f, 112.367f, 111.656f,
    110.945f, 110.233f, 109.522f, 108.811f, 108.865f, 108.92f,  108.974f, 109.028f, 109.082f, 109.137f, 109.191f,
    109.245f, 109.3f,   109.354f, 109.199f, 109.044f, 108.888f, 108.733f, 108.578f, 108.423f, 108.268f, 108.112f,
    107.957f, 107.802f, 107.501f, 107.2f,   106.898f, 106.597f, 106.296f, 105.995f, 105.694f, 105.392f, 105.091f,
    104.79f,  105.08f,  105.37f,  105.66f,  105.95f,  106.239f, 106.529f, 106.819f, 107.109f, 107.399f, 107.689f,
    107.361f, 107.032f, 106.704f, 106.375f, 106.047f, 105.719f, 105.39f,  105.062f, 104.733f, 104.405f, 104.369f,
    104.333f, 104.297f, 104.261f, 104.225f, 104.19f,  104.154f, 104.118f, 104.082f, 104.046f, 103.641f, 103.237f,
    102.832f, 102.428f, 102.023f, 101.618f, 101.214f, 100.809f, 100.405f, 100.f,    99.6334f, 99.2668f, 98.9003f,
    98.5337f, 98.1671f, 97.8005f, 97.4339f, 97.0674f, 96.7008f, 96.3342f, 96.2796f, 96.225f,  96.1703f, 96.1157f,
    96.0611f, 96.0065f, 95.9519f, 95.8972f, 95.8426f, 95.788f,  95.0778f, 94.3675f, 93.6573f, 92.947f,  92.2368f,
    91.5266f, 90.8163f, 90.1061f, 89.3958f, 88.6856f, 88.8177f, 88.9497f, 89.0818f, 89.2138f, 89.3459f, 89.478f,
    89.61f,   89.7421f, 89.8741f, 90.0062f, 89.9655f, 89.9248f, 89.8841f, 89.8434f, 89.8026f, 89.7619f, 89.7212f,
    89.6805f, 89.6398f, 89.5991f, 89.4091f, 89.219f,  89.029f,  88.8389f, 88.6489f, 88.4589f, 88.2688f, 88.0788f,
    87.8887f, 87.6987f, 87.2577f, 86.8167f, 86.3757f, 85.9347f, 85.4936f, 85.0526f, 84.6116f, 84.1706f, 83.7296f,
    83.2886f, 83.3297f, 83.3707f, 83.4118f, 83.4528f, 83.4939f, 83.535f,  83.576f,  83.6171f, 83.6581f, 83.6992f,
    83.332f,  82.9647f, 82.5975f, 82.2302f, 81.863f,  81.4958f, 81.1285f, 80.7613f, 80.394f,  80.0268f, 80.0456f,
    80.0644f, 80.0831f, 80.1019f, 80.1207f, 80.1395f, 80.1583f, 80.177f,  80.1958f, 80.2146f, 80.4209f, 80.6272f,
    80.8336f, 81.0399f, 81.2462f, 81.4525f, 81.6588f, 81.8652f, 82.0715f, 82.2778f, 81.8784f, 81.4791f, 81.0797f,
    80.6804f, 80.281f,  79.8816f, 79.4823f, 79.0829f, 78.6836f, 78.2842f, 77.4279f, 76.5716f, 75.7153f, 74.859f,
    74.0027f, 73.1465f, 72.2902f, 71.4339f, 70.5776f, 69.7213f, 69.9101f, 70.0989f, 70.2876f, 70.4764f, 70.6652f,
    70.854f,  71.0428f, 71.2315f, 71.4203f, 71.6091f, 71.8831f, 72.1571f, 72.4311f, 72.7051f, 72.979f,  73.253f,
    73.527f,  73.801f,  74.075f,  74.349f,  73.0745f, 71.8f,    70.5255f, 69.251f,  67.9765f, 66.702f,  65.4275f,
    64.153f,  62.8785f, 61.604f,  62.4322f, 63.2603f, 64.0885f, 64.9166f, 65.7448f, 66.573f,  67.4011f, 68.2293f,
    69.0574f, 69.8856f, 70.4057f, 70.9259f, 71.446f,  71.9662f, 72.4863f, 73.0064f, 73.5266f, 74.0467f, 74.5669f,
    75.087f,  73.9376f, 72.7881f, 71.6387f, 70.4893f, 69.3398f, 68.1904f, 67.041f,  65.8916f, 64.7421f, 63.5927f,
    61.8752f, 60.1578f, 58.4403f, 56.7229f, 55.0054f, 53.288f,  51.5705f, 49.8531f, 48.1356f, 46.4182f, 48.4569f,
    50.4956f, 52.5344f, 54.5731f, 56.6118f, 58.6505f, 60.6892f, 62.728f,  64.7667f, 66.8054f, 66.4631f, 66.1209f,
    65.7786f, 65.4364f, 65.0941f, 64.7518f, 64.4096f, 64.0673f, 63.7251f, 63.3828f, 63.4749f, 63.567f,  63.6592f,
    63.7513f, 63.8434f, 63.9355f, 64.0276f, 64.1198f, 64.2119f, 64.304f,  63.8188f, 63.3336f, 62.8484f, 62.3632f,
    61.8779f, 61.3927f, 60.9075f, 60.4223f, 59.9371f, 59.4519f, 58.7026f, 57.9533f, 57.204f,  56.4547f, 55.7054f,
    54.9562f, 54.2069f, 53.4576f, 52.7083f, 51.959f,  52.5072f, 53.0553f, 53.6035f, 54.1516f, 54.6998f, 55.248f,
    55.7961f, 56.3443f, 56.8924f, 57.4406f, 57.7278f, 58.015f,  58.3022f, 58.5894f, 58.8765f, 59.1637f, 59.4509f,
    59.7381f, 60.0253f, 60.3125f};
static constexpr TabulatedSpectrum s_Illuminant_D65 = {
    s_Illuminance_D65, sizeof(s_Illuminance_D65) / sizeof(s_Illuminance_D65[0]), 300.f, 830.f};

static constexpr float s_Illuminance_D75[] = {
    0.043f,   2.588f,   5.133f,   17.470f,  29.808f,  42.369f,  54.930f,  56.095f,  57.259f,  60.000f,  62.740f,
    62.861f,  62.982f,  66.647f,  70.312f,  68.507f,  66.703f,  68.333f,  69.963f,  85.946f,  101.929f, 106.911f,
    111.894f, 112.346f, 112.798f, 107.945f, 103.092f, 112.145f, 121.198f, 127.104f, 133.010f, 132.682f, 132.355f,
    129.838f, 127.322f, 127.061f, 126.800f, 122.291f, 117.783f, 117.186f, 116.589f, 115.146f, 113.702f, 111.181f,
    108.659f, 109.552f, 110.445f, 108.367f, 106.289f, 105.596f, 104.904f, 102.452f, 100.000f, 97.808f,  95.616f,
    94.914f,  94.213f,  90.605f,  86.997f,  87.112f,  87.227f,  86.684f,  86.140f,  84.861f,  83.581f,  81.164f,
    78.747f,  78.587f,  78.428f,  76.614f,  74.801f,  74.562f,  74.324f,  74.873f,  75.422f,  73.499f,  71.576f,
    67.714f,  63.852f,  64.464f,  65.076f,  66.573f,  68.070f,  62.256f,  56.443f,  60.343f,  64.242f,  66.697f,
    69.151f,  63.890f,  58.629f,  50.623f,  42.617f,  51.985f,  61.352f,  59.838f,  58.324f};
static constexpr TabulatedSpectrum s_Illuminant_D75 = {
    s_Illuminance_D75, sizeof(s_Illuminance_D75) / sizeof(s_Illuminance_D75[0]), 300.f, 780.f};

static constexpr float s_Illuminance_D93[] = {
    // nm D93 -- non-standard D93 illuminant used as the white point for broadcast television in Japan
    92.42,  92.69,  92.96,  111.38, 129.80, 135.80, 141.80, 141.45, 141.10, 133.98, 126.85, 135.60, 144.35, 149.96,
    155.57, 154.18, 152.80, 148.78, 144.77, 143.34, 141.91, 136.14, 130.37, 128.55, 126.72, 124.33, 121.94, 117.94,
    113.94, 114.04, 114.15, 111.52, 108.89, 107.47, 106.06, 103.03, 100.00, 97.31,  94.63,  93.35,  92.07,  88.66,
    85.25,  84.76,  84.27,  83.38,  82.50,  80.84,  79.18,  76.52,  73.86,  73.45,  73.03,  71.36,  69.69,  69.19,
    68.69,  68.74,  68.79,  67.05,  65.31,  61.73,  58.14,  58.50,  58.85,  60.34,  61.83,  56.57,  51.32,  54.97,
    58.62,  60.93,  63.24,  58.46,  53.69,  46.27,  38.86,  47.40,  55.94,  54.61,  53.28};
static constexpr TabulatedSpectrum s_Illuminant_D93 = {
    s_Illuminance_D93, sizeof(s_Illuminance_D93) / sizeof(s_Illuminance_D93[0]), 380.f, 780.f};

static constexpr float s_Illuminance_A[] = {
    // CIE standard illuminant A, a typical tungsten-filament light with relative spectral power distribution of 2856K,
    // at 1nm resolution
    0.930483, 0.967643, 1.00597, 1.04549, 1.08623, 1.12821, 1.17147, 1.21602, 1.26188, 1.3091,  1.35769, 1.40768,
    1.4591,   1.51198,  1.56633, 1.62219, 1.67959, 1.73855, 1.7991,  1.86127, 1.92508, 1.99057, 2.05776, 2.12667,
    2.19734,  2.2698,   2.34406, 2.42017, 2.49814, 2.57801, 2.65981, 2.74355, 2.82928, 2.91701, 3.00678, 3.09861,
    3.19253,  3.28857,  3.38676, 3.48712, 3.58968, 3.69447, 3.80152, 3.91085, 4.0225,  4.13648, 4.25282, 4.37156,
    4.49272,  4.61631,  4.74238, 4.87095, 5.00204, 5.13568, 5.27189, 5.4107,  5.55213, 5.69622, 5.84298, 5.99244,
    6.14462,  6.29955,  6.45724, 6.61774, 6.78105, 6.9472,  7.11621, 7.28811, 7.46292, 7.64066, 7.82135, 8.00501,
    8.19167,  8.38134,  8.57404, 8.7698,  8.96864, 9.17056, 9.37561, 9.58378, 9.7951,  10.0096, 10.2273, 10.4481,
    10.6722,  10.8996,  11.1302, 11.364,  11.6012, 11.8416, 12.0853, 12.3324, 12.5828, 12.8366, 13.0938, 13.3543,
    13.6182,  13.8855,  14.1563, 14.4304, 14.708,  14.9891, 15.2736, 15.5616, 15.853,  16.148,  16.4464, 16.7484,
    17.0538,  17.3628,  17.6753, 17.9913, 18.3108, 18.6339, 18.9605, 19.2907, 19.6244, 19.9617, 20.3026, 20.647,
    20.995,   21.3465,  21.7016, 22.0603, 22.4225, 22.7883, 23.1577, 23.5307, 23.9072, 24.2873, 24.6709, 25.0581,
    25.4489,  25.8432,  26.2411, 26.6425, 27.0475, 27.456,  27.8681, 28.2836, 28.7027, 29.1253, 29.5515, 29.9811,
    30.4142,  30.8508,  31.2909, 31.7345, 32.1815, 32.632,  33.0859, 33.5432, 34.004,  34.4682, 34.9358, 35.4068,
    35.8811,  36.3588,  36.8399, 37.3243, 37.8121, 38.3031, 38.7975, 39.2951, 39.796,  40.3002, 40.8076, 41.3182,
    41.832,   42.3491,  42.8693, 43.3926, 43.9192, 44.4488, 44.9816, 45.5174, 46.0563, 46.5983, 47.1433, 47.6913,
    48.2423,  48.7963,  49.3533, 49.9132, 50.476,  51.0418, 51.6104, 52.1818, 52.7561, 53.3332, 53.9132, 54.4958,
    55.0813,  55.6694,  56.2603, 56.8539, 57.4501, 58.0489, 58.6504, 59.2545, 59.8611, 60.4703, 61.082,  61.6962,
    62.3128,  62.932,   63.5535, 64.1775, 64.8038, 65.4325, 66.0635, 66.6968, 67.3324, 67.9702, 68.6102, 69.2525,
    69.8969,  70.5435,  71.1922, 71.843,  72.4959, 73.1508, 73.8077, 74.4666, 75.1275, 75.7903, 76.4551, 77.1217,
    77.7902,  78.4605,  79.1326, 79.8065, 80.4821, 81.1595, 81.8386, 82.5193, 83.2017, 83.8856, 84.5712, 85.2584,
    85.947,   86.6372,  87.3288, 88.0219, 88.7165, 89.4124, 90.1097, 90.8083, 91.5082, 92.2095, 92.912,  93.6157,
    94.3206,  95.0267,  95.7339, 96.4423, 97.1518, 97.8623, 98.5739, 99.2864, 100,     100.715, 101.43,  102.146,
    102.864,  103.582,  104.301, 105.02,  105.741, 106.462, 107.184, 107.906, 108.63,  109.354, 110.078, 110.803,
    111.529,  112.255,  112.982, 113.709, 114.436, 115.164, 115.893, 116.622, 117.351, 118.08,  118.81,  119.54,
    120.27,   121.001,  121.731, 122.462, 123.193, 123.924, 124.655, 125.386, 126.118, 126.849, 127.58,  128.312,
    129.043,  129.774,  130.505, 131.236, 131.966, 132.697, 133.427, 134.157, 134.887, 135.617, 136.346, 137.075,
    137.804,  138.532,  139.26,  139.988, 140.715, 141.441, 142.167, 142.893, 143.618, 144.343, 145.067, 145.79,
    146.513,  147.235,  147.957, 148.678, 149.398, 150.117, 150.836, 151.554, 152.271, 152.988, 153.704, 154.418,
    155.132,  155.845,  156.558, 157.269, 157.979, 158.689, 159.397, 160.104, 160.811, 161.516, 162.221, 162.924,
    163.626,  164.327,  165.028, 165.726, 166.424, 167.121, 167.816, 168.51,  169.203, 169.895, 170.586, 171.275,
    171.963,  172.65,   173.335, 174.019, 174.702, 175.383, 176.063, 176.741, 177.419, 178.094, 178.769, 179.441,
    180.113,  180.783,  181.451, 182.118, 182.783, 183.447, 184.109, 184.77,  185.429, 186.087, 186.743, 187.397,
    188.05,   188.701,  189.35,  189.998, 190.644, 191.288, 191.931, 192.572, 193.211, 193.849, 194.484, 195.118,
    195.75,   196.381,  197.009, 197.636, 198.261, 198.884, 199.506, 200.125, 200.743, 201.359, 201.972, 202.584,
    203.195,  203.803,  204.409, 205.013, 205.616, 206.216, 206.815, 207.411, 208.006, 208.599, 209.189, 209.778,
    210.365,  210.949,  211.532, 212.112, 212.691, 213.268, 213.842, 214.415, 214.985, 215.553, 216.12,  216.684,
    217.246,  217.806,  218.364, 218.92,  219.473, 220.025, 220.574, 221.122, 221.667, 222.21,  222.751, 223.29,
    223.826,  224.361,  224.893, 225.423, 225.951, 226.477, 227,     227.522, 228.041, 228.558, 229.073, 229.585,
    230.096,  230.604,  231.11,  231.614, 232.115, 232.615, 233.112, 233.606, 234.099, 234.589, 235.078, 235.564,
    236.047,  236.529,  237.008, 237.485, 237.959, 238.432, 238.902, 239.37,  239.836, 240.299, 240.76,  241.219,
    241.675,  242.13,   242.582, 243.031, 243.479, 243.924, 244.367, 244.808, 245.246, 245.682, 246.116, 246.548,
    246.977,  247.404,  247.829, 248.251, 248.671, 249.089, 249.505, 249.918, 250.329, 250.738, 251.144, 251.548,
    251.95,   252.35,   252.747, 253.142, 253.535, 253.925, 254.314, 254.7,   255.083, 255.465, 255.844, 256.221,
    256.595,  256.968,  257.338, 257.706, 258.071, 258.434, 258.795, 259.154, 259.511, 259.865, 260.217, 260.567,
    260.914,  261.259,  261.602};
static constexpr TabulatedSpectrum s_Illuminant_A = {
    s_Illuminance_A, sizeof(s_Illuminance_A) / sizeof(s_Illuminance_A[0]), 300.f, 830.f};

static constexpr float s_Illuminance_B[] = {
    // CIE standard illuminant B (obsolete)
    2.40,   4.00,   5.60,   7.60,   9.60,   12.40,  15.20,  18.80,  22.40,  26.85,  31.30,  36.18,  41.30,
    46.62,  52.10,  57.70,  63.20,  68.37,  73.10,  77.31,  80.80,  83.44,  85.40,  86.88,  88.30,  90.08,
    92.00,  93.75,  95.20,  96.23,  96.50,  95.71,  94.20,  92.37,  90.70,  89.65,  89.50,  90.43,  92.20,
    94.46,  96.90,  99.16,  101.00, 102.20, 102.80, 102.92, 102.60, 101.90, 101.00, 100.07, 99.20,  98.44,
    98.00,  98.08,  98.50,  99.06,  99.70,  100.36, 101.00, 101.56, 102.20, 103.05, 103.90, 104.59, 105.00,
    105.08, 104.90, 104.55, 103.90, 102.84, 101.60, 100.38, 99.10,  97.70,  96.20,  94.60,  92.90,  91.10,
    89.40,  88.00,  86.90,  85.90,  85.20,  84.80,  84.70,  84.90,  85.40};
static constexpr TabulatedSpectrum s_Illuminant_B = {
    s_Illuminance_B, sizeof(s_Illuminance_B) / sizeof(s_Illuminance_B[0]), 340.f, 770.f};

static constexpr float s_Illuminance_C[] = {
    33.00f,  39.92f,  47.40f,  55.17f,  63.30f,  71.81f,  80.60f,  89.53f,  98.10f,  105.80f, 112.40f, 117.75f,
    121.50f, 123.45f, 124.00f, 123.60f, 123.10f, 123.30f, 123.80f, 124.09f, 123.90f, 122.92f, 120.70f, 116.90f,
    112.10f, 106.98f, 102.30f, 98.81f,  96.90f,  96.78f,  98.00f,  99.94f,  102.10f, 103.95f, 105.20f, 105.67f,
    105.30f, 104.11f, 102.30f, 100.15f, 97.80f,  95.43f,  93.20f,  91.22f,  89.70f,  88.83f,  88.40f,  88.19f,
    88.10f,  88.06f,  88.00f,  87.86f,  87.80f,  87.99f,  88.20f,  88.20f,  87.90f,  87.22f,  86.30f,  85.30f,
    84.00f,  82.21f,  80.20f,  78.24f,  76.30f,  74.36f,  72.40f,  70.40f,  68.30f,  66.30f,  64.40f,  62.80f,
    61.50f,  60.20f,  59.20f,  58.50f,  58.10f,  58.00f,  58.20f,  58.50f,  59.10f};
static constexpr TabulatedSpectrum s_Illuminant_C = {
    s_Illuminance_C, sizeof(s_Illuminance_C) / sizeof(s_Illuminance_C[0]), 380.f, 780.f};

static constexpr float s_Illuminance_E[] = {
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f,
    100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f};
static constexpr TabulatedSpectrum s_Illuminant_E = {
    s_Illuminance_E, sizeof(s_Illuminance_E) / sizeof(s_Illuminance_E[0]), 380.f, 830.f};

// Reference whites used in the common color spaces below
static float2 s_white_point_values[] = {
    {0.32168f, 0.33767f}, // ACES: Academy Color Encoding System, ~6000k
    {0.34567f, 0.35850f}, // D50:	horizon light, ICC profile PCS
    {0.33242f, 0.34743f}, // D55:	mid-morning / mid-afternoon daylight
    {0.31271f, 0.32902f}, // D65:	noon daylight: television, sRGB color space
    {0.29902f, 0.31485f}, // D75:	North sky daylight
    {0.28315f, 0.29711f}, // D93:	high-efficiency blue phosphor monitors, BT.2035
    {0.3140f, 0.3510f},   // DCI: ~6300 K
    {0.31310f, 0.33727f}, // F1:	daylight fluorescent
    {0.37208f, 0.37529f}, // F2:	cool white fluorescent
    {0.40910f, 0.39430f}, // F3:	white fluorescent
    {0.44018f, 0.40329f}, // F4:	warm white fluorescent
    {0.31379f, 0.34531f}, // F5:	daylight fluorescent
    {0.37790f, 0.38835f}, // F6:	light white fluorescent
    {0.31292f, 0.32933f}, // F7:	D65 simulator, daylight simulator
    {0.34588f, 0.35875f}, // F8:	D50 simulator, Sylvania F40 Design 50
    {0.37417f, 0.37281f}, // F9:	cool white deluxe fluorescent
    {0.34609f, 0.35986f}, // F10:	Philips TL85, Ultralume 50
    {0.38052f, 0.37713f}, // F11:	Philips TL84, Ultralume 40
    {0.43695f, 0.40441f}, // F12:	Philips TL83, Ultralume 30
    {0.44757f, 0.40745f}, // A:	incandescent / tungsten
    {0.34842f, 0.35161f}, // B:	obsolete, direct sunlight at noon
    {0.31006f, 0.31616f}, // C:	obsolete, average / North sky daylight
    {0.33333f, 0.33333f}, // E:	equal energy
    {0.31271f, 0.32902f}, // Unspecified = D65
    {std::numeric_limits<float>::quiet_NaN(), std::numeric_limits<float>::quiet_NaN()}};

static const char *s_white_point_names[] = {"ACES",             // ACES: Academy Color Encoding System, ~6000k
                                            "D50",              // D50: horizon light, ICC profile PCS
                                            "D55",              // D55: mid-morning / mid-afternoon daylight
                                            "D65",              // D65: noon daylight: television, sRGB color space
                                            "D75",              // D75: North sky daylight
                                            "D93",              // D93: high-efficiency blue phosphor monitors, BT.2035
                                            "DCI",              // DCI: ~6300 K
                                            "F1",               // F1: daylight fluorescent
                                            "F2",               // F2: cool white fluorescent
                                            "F3",               // F3: white fluorescent
                                            "F4",               // F4: warm white fluorescent
                                            "F5",               // F5: daylight fluorescent
                                            "F6",               // F6: light white fluorescent
                                            "F7",               // F7: D65 simulator, daylight simulator
                                            "F8",               // F8: D50 simulator, Sylvania F40 Design 50
                                            "F9",               // F9: cool white deluxe fluorescent
                                            "F10",              // F10: Philips TL85, Ultralume 50
                                            "F11",              // F11: Philips TL84, Ultralume 40
                                            "F12",              // F12: Philips TL83, Ultralume 30
                                            "Std Illuminant A", // A: incandescent / tungsten
                                            "Std Illuminant B", // B: obsolete, direct sunlight at noon
                                            "Std Illuminant C", // C: obsolete, average / North sky daylight
                                            "Std Illuminant E", // E: equal energy
                                            "Unspecified (Assuming D65)", // Unspecified = D65
                                            "Custom",                     // Custom/NaN
                                            nullptr};

// Static array of chromaticities for each ColorGamut value
static const Chromaticities s_gamut_chromaticities[] = {
    {{0.6400f, 0.3300f}, {0.3000f, 0.6000f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_D65]},
    {{0.6700f, 0.3300f}, {0.2100f, 0.7100f}, {0.1400f, 0.0800f}, s_white_point_values[WhitePoint_C]},
    {{0.6400f, 0.3300f}, {0.2900f, 0.6000f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_D65]},
    {{0.6300f, 0.3400f}, {0.3100f, 0.5950f}, {0.1550f, 0.0700f}, s_white_point_values[WhitePoint_D65]},
    {{0.6300f, 0.3400f}, {0.3100f, 0.5950f}, {0.1550f, 0.0700f}, s_white_point_values[WhitePoint_D65]},
    {{0.6810f, 0.3190f}, {0.2430f, 0.6920f}, {0.1450f, 0.0490f}, s_white_point_values[WhitePoint_C]},
    {{0.7080f, 0.2920f}, {0.1700f, 0.7970f}, {0.1310f, 0.0460f}, s_white_point_values[WhitePoint_D65]},
    {{0.7350f, 0.2650f}, {0.2740f, 0.7170f}, {0.1670f, 0.0090f}, s_white_point_values[WhitePoint_E]},
    {{0.6800f, 0.3200f}, {0.2650f, 0.6900f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_DCI]},
    {{0.6800f, 0.3200f}, {0.2650f, 0.6900f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_D65]},
    {{0.6300f, 0.3400f}, {0.2950f, 0.6050f}, {0.1550f, 0.0770f}, s_white_point_values[WhitePoint_D65]},
    {{0.73470f, 0.26530f}, {0.00000f, 1.00000f}, {0.00010f, -0.07700f}, s_white_point_values[WhitePoint_ACES]},
    {{0.713f, 0.293f}, {0.165f, 0.830f}, {0.128f, 0.044f}, s_white_point_values[WhitePoint_ACES]},
    {{0.6400f, 0.3300f}, {0.2100f, 0.7100f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_D65]},
    {{0.7347f, 0.2653f}, {0.1596f, 0.8404f}, {0.0366f, 0.0001f}, s_white_point_values[WhitePoint_D50]},
    {{1.f, 0.f}, {0.f, 1.f}, {0.f, 0.f}, s_white_point_values[WhitePoint_E]},
    {{0.6400f, 0.3300f}, {0.3000f, 0.6000f}, {0.1500f, 0.0600f}, s_white_point_values[WhitePoint_D65]}
    // ColorGamut_Custom (should not be used, throw below)
};

static const char *s_gamut_names[] = {"sRGB/BT.709",
                                      "BT.470 M/NTSC",
                                      "BT.470 BG/PAL/SECAM",
                                      "SMPTE ST 170",
                                      "SMPTE ST 240",
                                      "Generic film",
                                      "BT.2020/BT.2100",
                                      "SMPTE ST 428-1",
                                      "DCI P3/SMPTE RP 431",
                                      "Display P3/SMPTE EG 432",
                                      "CICP 22",
                                      "ACES AP0",
                                      "ACEScg AP1",
                                      "Adobe RGB",
                                      "ProPhoto RGB",
                                      "CIE 1931 XYZ",
                                      "Unspecified (Assuming sRGB/BT.709)",
                                      "Custom",
                                      nullptr};

static const char *s_transfer_function_names[] = {"Unknown (Assuming sRGB)", // TransferFunction_Unknown
                                                  "Linear",                  // TransferFunction_Linear
                                                  "Gamma",                   // TransferFunction_Gamma
                                                  "sRGB IEC61966-2.1",       // TransferFunction_sRGB
                                                  "BT.709/2020",             // TransferFunction_ITU
                                                  "BT.2100 PQ",              // TransferFunction_BT2100_PQ
                                                  "BT.2100 HLG",             // TransferFunction_BT2100_HLG
                                                  "SMPTE ST 240",            // TransferFunction_ST240
                                                  "Log100",                  // TransferFunction_Log100
                                                  "Log100 Sqrt10",           // TransferFunction_Log100_Sqrt10
                                                  "IEC 61966-2-4",           // TransferFunction_IEC61966_2_4
                                                  "DCI-P3",                  // TransferFunction_DCI_P3
                                                  nullptr};

float2 white_point(WhitePoint wp)
{
    if (wp >= WhitePoint_Custom)
        return s_white_point_values[WhitePoint_Custom];
    return s_white_point_values[wp];
}

WhitePoint named_white_point(float2 wp)
{
    for (WhitePoint_ i = WhitePoint_FirstNamed; i <= WhitePoint_LastNamed; ++i)
    {
        if (approx_equal(wp, s_white_point_values[i]))
            return static_cast<WhitePoint>(i);
    }
    // Return custom for unrecognized
    return WhitePoint_Custom;
}

const char *white_point_name(WhitePoint wp) { return s_white_point_names[wp]; }

const char **white_point_names() { return s_white_point_names; }

const char *color_gamut_name(const ColorGamut primaries)
{
    if (primaries >= ColorGamut_Custom)
        return s_gamut_names[ColorGamut_Custom];
    return s_gamut_names[primaries];
}

const char **color_gamut_names() { return s_gamut_names; }

Chromaticities gamut_chromaticities(ColorGamut primaries)
{
    if (primaries < 0 || primaries >= ColorGamut_Custom)
        throw std::invalid_argument("Unrecognized ColorGamut value");
    return s_gamut_chromaticities[primaries];
}

Chromaticities chromaticities_from_cicp(int cicp)
{
    switch (cicp)
    {
    case 1: return s_gamut_chromaticities[ColorGamut_sRGB_BT709];
    case 2: return s_gamut_chromaticities[ColorGamut_Unspecified];
    case 4: return s_gamut_chromaticities[ColorGamut_BT470M];
    case 5: return s_gamut_chromaticities[ColorGamut_BT470BG];
    case 6: return s_gamut_chromaticities[ColorGamut_SMPTE170M];
    case 7: return s_gamut_chromaticities[ColorGamut_SMPTE240M];
    case 8: return s_gamut_chromaticities[ColorGamut_Film];
    case 9: return s_gamut_chromaticities[ColorGamut_BT2020_2100];
    case 10: return s_gamut_chromaticities[ColorGamut_SMPTE428];
    case 11: return s_gamut_chromaticities[ColorGamut_DCI_P3_SMPTE431];
    case 12: return s_gamut_chromaticities[ColorGamut_Display_P3_SMPTE432];
    case 22: return s_gamut_chromaticities[ColorGamut_CICP_22];
    default: throw std::invalid_argument("Unrecognized or unsupported CICP value for chromaticities");
    }
}

ColorGamut named_color_gamut(const Chromaticities &chr)
{
    for (ColorGamut_ i = ColorGamut_FirstNamed; i <= ColorGamut_LastNamed; ++i)
    {
        if (approx_equal(chr, gamut_chromaticities(static_cast<ColorGamut>(i))))
            return static_cast<ColorGamut>(i);
    }
    // Return custom for unrecognized
    return ColorGamut_Custom;
}

string transfer_function_name(TransferFunction tf, float gamma)
{
    if (tf == TransferFunction_Gamma)
        return fmt::format("{} (={})", s_transfer_function_names[TransferFunction_Gamma], float(1.0 / gamma));
    else if (tf < TransferFunction_Unknown || tf >= TransferFunction_Count)
        return s_transfer_function_names[TransferFunction_Unknown];
    else
        return s_transfer_function_names[tf];
}

TransferFunction transfer_function_from_cicp(int cicp, float *gamma)
{
    switch (cicp)
    {
    case 1: [[fallthrough]];
    case 6: [[fallthrough]];
    case 12: [[fallthrough]];
    case 14: [[fallthrough]];
    case 15: return TransferFunction_ITU;
    case 4:
        if (gamma)
            *gamma = 2.2f;
        return TransferFunction_Gamma;
    case 5:
        if (gamma)
            *gamma = 2.8f;
        return TransferFunction_Gamma;
    case 7: return TransferFunction_ST240;
    case 8: return TransferFunction_Linear;
    case 9: return TransferFunction_Log100;
    case 10: return TransferFunction_Log100_Sqrt10;
    case 11: return TransferFunction_IEC61966_2_4;
    case 13: return TransferFunction_sRGB;
    case 16: return TransferFunction_BT2100_PQ;
    case 17: return TransferFunction_DCI_P3;
    case 18: return TransferFunction_BT2100_HLG;
    default: return TransferFunction_Unknown;
    }
}

float3x3 RGB_to_XYZ(const Chromaticities &chroma, float Y)
{
    // Adapted from ImfChromaticities.cpp
    //

    //
    // For an explanation of how the color conversion matrix is derived,
    // see Roy Hall, "Illumination and Color in Computer Generated Imagery",
    // Springer-Verlag, 1989, chapter 3, "Perceptual Response"; and
    // Charles A. Poynton, "A Technical Introduction to Digital Video",
    // John Wiley & Sons, 1996, chapter 7, "Color science for video".
    //

    //
    // X and Z values of RGB value (1, 1, 1), or "white"
    //

    // prevent a division that rounds to zero
    if (std::abs(chroma.white.y) <= 1.f && std::abs(chroma.white.x * Y) >= std::abs(chroma.white.y) * FLT_MAX)
    {
        throw std::invalid_argument("Bad chromaticities: white.y cannot be zero");
    }

    float X = chroma.white.x * Y / chroma.white.y;
    float Z = (1 - chroma.white.x - chroma.white.y) * Y / chroma.white.y;

    //
    // Scale factors for matrix rows, compute numerators and common denominator
    //

    float d = chroma.red.x * (chroma.blue.y - chroma.green.y) + chroma.blue.x * (chroma.green.y - chroma.red.y) +
              chroma.green.x * (chroma.red.y - chroma.blue.y);

    float SrN =
        (X * (chroma.blue.y - chroma.green.y) - chroma.green.x * (Y * (chroma.blue.y - 1) + chroma.blue.y * (X + Z)) +
         chroma.blue.x * (Y * (chroma.green.y - 1) + chroma.green.y * (X + Z)));

    float SgN =
        (X * (chroma.red.y - chroma.blue.y) + chroma.red.x * (Y * (chroma.blue.y - 1) + chroma.blue.y * (X + Z)) -
         chroma.blue.x * (Y * (chroma.red.y - 1) + chroma.red.y * (X + Z)));

    float SbN =
        (X * (chroma.green.y - chroma.red.y) - chroma.red.x * (Y * (chroma.green.y - 1) + chroma.green.y * (X + Z)) +
         chroma.green.x * (Y * (chroma.red.y - 1) + chroma.red.y * (X + Z)));

    if (std::abs(d) < 1.f && (std::abs(SrN) >= std::abs(d) * FLT_MAX || std::abs(SgN) >= std::abs(d) * FLT_MAX ||
                              std::abs(SbN) >= std::abs(d) * FLT_MAX))
    {
        // cannot generate matrix if all RGB primaries have the same y value
        // or if they all have the an x value of zero
        // in both cases, the primaries are colinear, which makes them unusable
        throw std::invalid_argument("Bad chromaticities: RGBtoXYZ matrix is degenerate");
    }

    float Sr = SrN / d;
    float Sg = SgN / d;
    float Sb = SbN / d;

    //
    // Assemble the matrix
    //

    float3x3 M{la::identity};

    M[0][0] = Sr * chroma.red.x;
    M[0][1] = Sr * chroma.red.y;
    M[0][2] = Sr * (1 - chroma.red.x - chroma.red.y);

    M[1][0] = Sg * chroma.green.x;
    M[1][1] = Sg * chroma.green.y;
    M[1][2] = Sg * (1 - chroma.green.x - chroma.green.y);

    M[2][0] = Sb * chroma.blue.x;
    M[2][1] = Sb * chroma.blue.y;
    M[2][2] = Sb * (1 - chroma.blue.x - chroma.blue.y);

    // M[3][3] = 1.f;

    return M;
}

bool color_conversion_matrix(float3x3 &M, const Chromaticities &src, const Chromaticities &dst,
                             AdaptationMethod CAT_method)
{
    try
    {
        if (src == dst)
        {
            // The file already contains data in the target colorspace.
            // color conversion is not necessary.
            M = float3x3{la::identity};
            return false;
        }

        //
        // Create a matrix that transforms colors from the
        // RGB space of the input file into the target space
        // using a color adaptation transform to move the
        // white point.
        //

        float3x3 CAT{la::identity}; // chromatic adaptation matrix
        if (CAT_method > 0 && CAT_method <= 3 && src.white != dst.white)
        {
            // the cone primary response matrices (and their inverses) for 3 different methods
            static const float3x3 CPM[3] = {{{1.f, 0.f, 0.f}, // XYZ scaling
                                             {0.f, 1.f, 0.f},
                                             {0.f, 0.f, 1.f}},
                                            {{0.895100f, -0.750200f, 0.038900f}, // Bradford
                                             {0.266400f, 1.713500f, -0.068500f},
                                             {-0.161400f, 0.036700f, 1.029600f}},
                                            {{0.4002400f, -0.2263000f, 0.0000000f}, // Von Kries
                                             {0.7076000f, 1.1653200f, 0.0000000f},
                                             {-0.0808100f, 0.0457000f, 0.9182200f}}};
            static const float3x3 invCPM[3]{{{1.f, 0.f, 0.f}, //
                                             {0.f, 1.f, 0.f}, //
                                             {0.f, 0.f, 1.f}},
                                            {{0.986993f, 0.432305f, -0.008529f}, //
                                             {-0.147054f, 0.518360f, 0.040043f}, //
                                             {0.159963f, 0.049291f, 0.968487f}},
                                            {{1.8599364f, 0.3611914f, 0.0000000f},  //
                                             {-1.1293816f, 0.6388125f, 0.0000000f}, //
                                             {0.2198974f, -0.0000064f, 1.0890636f}}};
            //
            // Convert the white points of the two RGB spaces to XYZ
            //

            float  fx = src.white.x;
            float  fy = src.white.y;
            float3 src_neutral_XYZ(fx / fy, 1, (1 - fx - fy) / fy);

            float  ax = dst.white.x;
            float  ay = dst.white.y;
            float3 dst_neutral_XYZ(ax / ay, 1, (1 - ax - ay) / ay);

            //
            // Compute the CAT
            //

            float3 ratio(mul(CPM[CAT_method - 1], dst_neutral_XYZ) / mul(CPM[CAT_method - 1], src_neutral_XYZ));

            float3x3 ratio_mat({ratio[0], 0.f, 0.f}, {0.f, ratio[1], 0.f}, {0.f, 0.f, ratio[2]});

            CAT = mul(invCPM[CAT_method - 1], ratio_mat, CPM[CAT_method - 1]);
        }

        //
        // Build a combined file-RGB-to-target-RGB conversion matrix
        //

        M = mul(XYZ_to_RGB(dst, 1), CAT, RGB_to_XYZ(src, 1));

        return true;
    }
    catch (...)
    {
        return false;
    }
}

Chromaticities primaries_from_matrix(const float3x3 &rgb_to_XYZ)
{
    Chromaticities result;
    // Multiplying the matrix by [1,0,0], [0,1,0], or [0,0,1] gives the XYZ values of the primaries.
    // Hence, the columns of the matrix are XYZ values of the primaries.
    // Divide each by its sum to get corresponding chromaticities.
    result.red   = rgb_to_XYZ.x.xy() / sum(rgb_to_XYZ.x);
    result.green = rgb_to_XYZ.y.xy() / sum(rgb_to_XYZ.y);
    result.blue  = rgb_to_XYZ.z.xy() / sum(rgb_to_XYZ.z);

    // Multiplying the matrix by full-intensity for each primary [1,1,1] gives us XYZ of white.
    // Hence, the sum of the columns is the XYZ of white.
    // Divide that by the sum of its components to get its chromaticity;
    float3 wpXYZ = rgb_to_XYZ.x + rgb_to_XYZ.y + rgb_to_XYZ.z;
    result.white = wpXYZ.xy() / sum(wpXYZ);
    return result;
}

float3 YC_to_RGB(float3 input, float3 Yw)
{
    if (input[0] == 0.f && input[2] == 0.f)
        //
        // Special case -- both chroma channels are 0.  To avoid
        // rounding errors, we explicitly set the output R, G and B
        // channels equal to the input luminance.
        //
        return float3(input[1], input[1], input[1]);

    float Y = input[1];
    float r = (input[0] + 1.f) * input[1];
    float b = (input[2] + 1.f) * input[1];
    float g = (Y - r * Yw.x - b * Yw.z) / Yw.y;

    return float3(r, g, b);
}

float3 RGB_to_YC(float3 input, float3 Yw)
{
    //
    // Conversion to YCA works only if R, G and B are finite and non-negative.
    //
    float3 output;
    if (!std::isfinite(input[0]) || input[0] < 0.f)
        input[0] = 0;
    if (!std::isfinite(input[1]) || input[1] < 0.f)
        input[1] = 0;
    if (!std::isfinite(input[2]) || input[2] < 0.f)
        input[2] = 0;

    if (input[0] == input[1] && input[1] == input[2])
    {
        //
        // Special case -- R, G and B are equal. To avoid rounding
        // errors, we explicitly set the output luminance channel
        // to G, and the chroma channels to 0.
        //
        // The special cases here and in YCtoRGB() ensure that
        // converting black-and white images from RGB to YC and
        // back is lossless.
        //

        output[0] = 0;
        output[1] = input[1];
        output[2] = 0;
    }
    else
    {
        output[1] = dot(input, Yw);
        float Y   = output[1];
        input[0]  = (std::abs(input[0] - Y) < FLT_MAX * Y) ? (input[0] - Y) / Y : 0;
        input[2]  = (std::abs(input[2] - Y) < FLT_MAX * Y) ? (input[2] - Y) / Y : 0;
    }
    return output;
}

const float3x3 &sRGB_to_XYZ()
{
    static const float3x3 M = RGB_to_XYZ(Chromaticities{}, 1.f);
    return M;
}

const float3x3 &XYZ_to_sRGB()
{
    static const float3x3 M = XYZ_to_RGB(Chromaticities{}, 1.f);
    return M;
}

const float3 &sRGB_Yw()
{
    static const float3 Yw = computeYw(Chromaticities{});
    return Yw;
}

Color3 linear_to_sRGB(const Color3 &c) { return la::apply(linear_to_sRGB<float>, c); }
Color4 linear_to_sRGB(const Color4 &c) { return {linear_to_sRGB(c.xyz()), c.w}; }
Color3 sRGB_to_linear(const Color3 &c) { return la::apply(sRGB_to_linear<float>, c); }
Color4 sRGB_to_linear(const Color4 &c) { return {sRGB_to_linear(c.xyz()), c.w}; }

Color3 linear_to_gamma(const Color3 &c, const Color3 &inv_gamma)
{
    return la::apply(linear_to_gamma<float>, c, inv_gamma);
}
Color4 linear_to_gamma(const Color4 &c, const Color3 &inv_gamma) { return {linear_to_gamma(c.xyz(), inv_gamma), c.w}; }

void xyYToXZ(float *X, float *Z, float x, float y, float Y)
{
    if (Y == 0.0f)
    {
        *X = 0.0f;
        *Z = 0.0f;
    }
    else
    {
        *X = x * Y;
        *Z = (1.0f - x - y) * Y / y;
    }
}

static float sample_linear(float t, const float *buffer, size_t count)
{
    float width = (float)(count - 1);
    float i0    = std::floor(t * width);
    float i1    = std::ceil(t * width);

    float ti;
    if (i0 != i1)
        ti = (t * width - i0) / (i1 - i0);
    else
        ti = 1.0f;

    return lerp(buffer[(size_t)i0], buffer[(size_t)i1], ti);
}

TabulatedSpectrum white_point_spectrum(WhitePoint wp)
{
    switch (wp)
    {
    case WhitePoint_D50: return s_Illuminant_D50;
    case WhitePoint_D55: return s_Illuminant_D55;
    case WhitePoint_D65: return s_Illuminant_D65;
    case WhitePoint_D75: return s_Illuminant_D75;
    case WhitePoint_D93: return s_Illuminant_D93;
    case WhitePoint_A: return s_Illuminant_A;
    case WhitePoint_B: return s_Illuminant_B;
    case WhitePoint_C: return s_Illuminant_C;
    case WhitePoint_E: return s_Illuminant_E;
    default: return TabulatedSpectrum{}; // Return an empty spectrum for unrecognized white points
    }
}

TabulatedSpectrum CIE_X_spectrum() { return s_CIE_X; }
TabulatedSpectrum CIE_Y_spectrum() { return s_CIE_Y; }
TabulatedSpectrum CIE_Z_spectrum() { return s_CIE_Z; }

float TabulatedSpectrum::eval(float wavelength) const
{
    return sample_linear(saturate(lerp_factor(min_wavelength, max_wavelength, wavelength)), data, size);
}

float3 wavelength_to_XYZ(float wavelength)
{
    return {s_CIE_X.eval(wavelength), s_CIE_Y.eval(wavelength), s_CIE_Z.eval(wavelength)};
}

void to_linear(float *pixels, int3 size, TransferFunction tf, float gamma)
{
    if (tf == TransferFunction_BT2100_HLG && (size.z == 3 || size.z == 4))
    {
        // HLG needs to operate on all three channels at once
        if (size.z == 3)
            parallel_for(blocked_range<int>(0, size.x * size.y, 1024 * 1024),
                         [rgb = reinterpret_cast<float3 *>(pixels)](int start, int end, int, int)
                         {
                             for (int i = start; i < end; ++i) rgb[i] = EOTF_BT2100_HLG(rgb[i]) / 255.f;
                         });
        else // size.z == 4
            // don't modify the alpha channel
            parallel_for(blocked_range<int>(0, size.x * size.y, 1024 * 1024),
                         [rgb = reinterpret_cast<float4 *>(pixels)](int start, int end, int, int)
                         {
                             for (int i = start; i < end; ++i) rgb[i].xyz() = EOTF_BT2100_HLG(rgb[i].xyz()) / 255.f;
                         });
    }
    else
    {
        // assume this means we have an alpha channel, which we pass through without modification
        int num_color_channels = (size.z == 2 || size.z == 4) ? size.z - 1 : size.z;
        // other transfer functions apply to each channel independently
        parallel_for(blocked_range<int>(0, size.x * size.y, 1024 * 1024 / size.z),
                     [&pixels, tf, gamma, size, num_color_channels](int start, int end, int, int)
                     {
                         for (int i = start; i < end; ++i)
                             for (int c = 0; c < num_color_channels; ++c)
                                 pixels[i * size.z + c] = to_linear(pixels[i * size.z + c], tf, gamma);
                     });
    }
}
