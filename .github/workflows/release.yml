name: Publish to releases and github.io website

on:
  push:
    tags:
      - "v*.*"
      - "v*.*.*"
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build_macos:
    name: Build on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # macos-13 is an intel x86_64 runner
          # macos-14 is an arm64 runner
          #
          # Disabling universal build until libultrahdr fixes its cross-compilation
          # - {
          #     name: "macOS Universal",
          #     os: macos-14,
          #     arch: "universal",
          #     flags: '-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_IGNORE_PATH="/opt/homebrew/Cellar/harfbuzz/10.1.0/include/;/opt/homebrew/Cellar/harfbuzz/10.1.0/lib/;/usr/local/Cellar/harfbuzz/10.1.0/lib/;/usr/local/Cellar/harfbuzz/10.1.0/;/opt/homebrew/Cellar/brotli/1.1.0/include;/opt/homebrew/Cellar/brotli/1.1.0/lib/;/usr/local/Cellar/brotli/1.1.0/include;/usr/local/Cellar/brotli/1.1.0/lib/;/usr/local/Cellar/;/opt/homebrew/lib;/opt/homebrew/include;/opt/homebrew/Cellar" -DHDRVIEW_ENABLE_UHDR=OFF -DHELLOIMGUI_FREETYPE_STATIC=ON',
          #   }
          - {
              name: "macOS Apple Silicon",
              os: macos-14,
              arch: "arm64",
              flags: "-DHDRVIEW_ENABLE_HEIF=ON -DHDRVIEW_ENABLE_JPEGXL=ON -DHDRVIEW_ENABLE_UHDR=ON -DUHDR_BUILD_DEPS=ON",
            }
          - {
              name: "macOS Intel",
              os: macos-13,
              arch: "x86_64",
              flags: "-DHDRVIEW_ENABLE_HEIF=ON -DHDRVIEW_ENABLE_JPEGXL=ON -DHDRVIEW_ENABLE_UHDR=ON -DUHDR_BUILD_DEPS=ON",
            }

    steps:
      - name: Install dependencies
        run: brew install ninja create-dmg dylibbundler jpeg-xl little-cms2 libultrahdr libheif libpng imath cli11 spdlog fmt aom libde265 x265

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      # Setup caching of build artifacts to reduce total build time (only Linux and MacOS)
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build/${{ matrix.config.arch }} -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_POLICY_DEFAULT_CMP0135=NEW -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 ${{ matrix.config.flags }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build/${{ matrix.config.arch }} --parallel --config ${{env.BUILD_TYPE}}

      - name: Checking that HDRView runs
        run: |
          ${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView.app/Contents/MacOS/HDRView --help

      - name: Bundle dependencies
        run: dylibbundler -od -b -x ${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView.app/Contents/MacOS/HDRView -d ${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView.app/Contents/libs/

      - name: Creating dmg
        run: |
          RESULT="${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView-${{ matrix.config.arch }}.dmg"
          test -f $RESULT && rm $RESULT
          create-dmg --window-size 500 300 --icon-size 96 --volname "HDRView Installer" --app-drop-link 360 105 --icon HDRView.app 130 105 $RESULT ${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView.app

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: |
            ${{github.workspace}}/build/${{ matrix.config.arch }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{github.workspace}}/build/${{ matrix.config.arch }}/HDRView-${{ matrix.config.arch }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
      - name: Install dependencies
        run: |
          pip install Pillow
          choco install libjpeg-turbo

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_POLICY_DEFAULT_CMP0135=NEW -DHDRVIEW_ENABLE_HEIF=ON -DHDRVIEW_ENABLE_JPEGXL=ON -DHDRVIEW_ENABLE_UHDR=ON -DUHDR_BUILD_DEPS=ON

      - name: Build
        run: cmake --build ${{github.workspace}}/build --parallel --config ${{env.BUILD_TYPE}} --verbose

      - name: Checking that HDRView runs
        working-directory: ${{github.workspace}}
        run: ./build/${{env.BUILD_TYPE}}/HDRView.exe --help

      - name: Copy files for archiving and release
        working-directory: ${{github.workspace}}/build
        run: |
          cmake -E copy_directory assets deploy/assets/
          cmake -E copy ${{env.BUILD_TYPE}}/HDRView.exe deploy/

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows-latest
          path: |
            ${{github.workspace}}/build/deploy

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: "zip"
          filename: "HDRView-windows.zip"
          directory: ${{github.workspace}}/build/deploy

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{github.workspace}}/build/deploy/HDRView-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_emscripten:
    name: Build and deploy emscripten webapp
    runs-on: macos-14

    steps:
      - name: Install dependencies
        run: |
          brew install ninja emscripten

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      # Setup caching of build artifacts to reduce total build time (only Linux and MacOS)
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2

      - name: Configure CMake
        run: |
          emcmake cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/deploy

      - name: Build
        run: cmake --build ${{github.workspace}}/build --parallel

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-emscripten
          path: |
            ${{github.workspace}}/build

      - name: CPack
        working-directory: ${{github.workspace}}/build
        run: |
          cmake --install .
          mv deploy/HDRView.html deploy/index.html

      - name: Publish
        uses: peaceiris/actions-gh-pages@v4
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ${{github.workspace}}/build/deploy
