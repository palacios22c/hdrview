name: macOS build

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"
    paths:
      # This action only runs on push when files affecting the build change
      - "**.cpp"
      - "**.h"
      - "**.metal"
      - "**.cmake"
      - "**Lists.txt"
      - "**-mac.yml"
  workflow_dispatch:

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build:
    name: ${{ matrix.config.name }} (${{ matrix.buildtype }})
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # macos-13 is an intel x86_64 runner
          # macos-14 is an arm64 runner
          - {
              name: "macOS 14 universal",
              os: macos-14,
              arch: "universal",
              flags: >
                -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                -DCMAKE_IGNORE_PATH="$(
                  find /opt/homebrew/Cellar/harfbuzz/*/include -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /opt/homebrew/Cellar/harfbuzz/*/lib -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /opt/homebrew/Cellar/brotli/*/include -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /opt/homebrew/Cellar/brotli/*/lib -type d 2>/dev/null | tr '\n' ';'
                )/opt/homebrew/lib;/opt/homebrew/include;/opt/homebrew/Cellar"
                -DHDRVIEW_ENABLE_UHDR=OFF
                -DHELLOIMGUI_FREETYPE_STATIC=ON',
            }
          - {
              name: "macOS 13 universal",
              os: macos-13,
              arch: "universal",
              flags: >
                -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
                -DCMAKE_IGNORE_PATH="$(
                  find /usr/local/Cellar/harfbuzz/*/lib -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /usr/local/Cellar/harfbuzz/*/ -maxdepth 0 -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /usr/local/Cellar/brotli/*/include -type d 2>/dev/null | tr '\n' ';'
                )$(
                  find /usr/local/Cellar/brotli/*/lib -type d 2>/dev/null | tr '\n' ';'
                )/usr/local/lib/;/usr/local/Cellar/"
                -DHDRVIEW_ENABLE_UHDR=OFF
                -DHELLOIMGUI_FREETYPE_STATIC=ON',
            }
          - {
              name: "macOS 14 Apple Silicon",
              os: macos-14,
              arch: "arm64",
              flags: "-DHDRVIEW_ENABLE_HEIF=ON -DHDRVIEW_ENABLE_JPEGXL=ON -DHDRVIEW_ENABLE_UHDR=ON -DUHDR_BUILD_DEPS=ON",
            }
          - {
              name: "macOS 13 Intel",
              os: macos-13,
              arch: "x86_64",
              flags: "-DHDRVIEW_ENABLE_HEIF=ON -DHDRVIEW_ENABLE_JPEGXL=ON -DHDRVIEW_ENABLE_UHDR=ON -DUHDR_BUILD_DEPS=ON",
            }

        buildtype: [Release, Debug]

    steps:
      - name: Install dependencies
        run: brew install ninja create-dmg dylibbundler jpeg-xl little-cms2 libultrahdr libheif imath cli11 spdlog fmt aom libde265 x265

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

      # Setup caching of build artifacts to reduce total build time (only Linux and MacOS)
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.buildtype }}

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} -DCMAKE_POLICY_DEFAULT_CMP0135=NEW -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 ${{ matrix.config.flags }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}  --parallel --config ${{ matrix.buildtype }}

      - name: Checking that HDRView runs
        run: |
          ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.app/Contents/MacOS/HDRView --help

      - name: Bundle dependencies
        run: dylibbundler -od -b -x ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.app/Contents/MacOS/HDRView -d ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.app/Contents/libs/

      - name: Creating dmg (macOS)
        run: |
          RESULT="${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.dmg"
          test -f $RESULT && rm $RESULT
          create-dmg --window-size 500 300 --icon-size 96 --volname "HDRView Installer" --app-drop-link 360 105 --icon HDRView.app 130 105 $RESULT ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.app

      - name: Archive dmg (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: HDRView-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.buildtype }}.dmg
          path: |
            ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}/HDRView.dmg

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ matrix.buildtype }}
          path: |
            ${{github.workspace}}/build/${{ matrix.config.arch }}-${{ matrix.buildtype }}
